////////////////////////////////////////////////////////////////////////////////
//
// Filename:	./regdefs.h
//
// Project:	VideoZip, a ZipCPU SoC supporting video functionality
//
// DO NOT EDIT THIS FILE!
// Computer Generated: This file is computer generated by AUTOFPGA. DO NOT EDIT.
// DO NOT EDIT THIS FILE!
//
// CmdLine:	autofpga autofpga -d -o . allclocks.txt genclk.txt netclockctr.txt global.txt icape.txt version.txt buserr.txt pic.txt pwrcount.txt xpander.txt spio.txt gpio.txt rtcgps.txt rtcdate.txt wbuconsole.txt bkram.txt flash.txt sdram.txt zipmaster.txt mdio.txt enet.txt gps.txt sdspi.txt cpuscope.txt mem_bkram_only.txt mem_flash_bkram.txt xdc.txt clkcounter.txt
//
// Creator:	Dan Gisselquist, Ph.D.
//		Gisselquist Technology, LLC
//
////////////////////////////////////////////////////////////////////////////////
//
// Copyright (C) 2017-2019, Gisselquist Technology, LLC
//
// This program is free software (firmware): you can redistribute it and/or
// modify it under the terms of  the GNU General Public License as published
// by the Free Software Foundation, either version 3 of the License, or (at
// your option) any later version.
//
// This program is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTIBILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// for more details.
//
// You should have received a copy of the GNU General Public License along
// with this program.  (It's in the $(ROOT)/doc directory.  Run make with no
// target there if the PDF file isn't present.)  If not, see
// <http://www.gnu.org/licenses/> for a copy.
//
// License:	GPL, v3, as defined and found on www.gnu.org,
//		http://www.gnu.org/licenses/gpl.html
//
//
////////////////////////////////////////////////////////////////////////////////
//
//
#ifndef	REGDEFS_H
#define	REGDEFS_H


//
// The @REGDEFS.H.INCLUDE tag
//
// @REGDEFS.H.INCLUDE for masters
// @REGDEFS.H.INCLUDE for peripherals
// And finally any master REGDEFS.H.INCLUDE tags
// End of definitions from REGDEFS.H.INCLUDE


//
// Register address definitions, from @REGS.#d
//
// FLASH erase/program configuration registers
#define	R_FLASHCFG      	0x02000000	// 02000000, wbregs names: FLASHCFG, QSPIC
// zipscope scope
#define	R_ZIPSCOPE      	0x04000000	// 04000000, wbregs names: ZIPSCOPE
#define	R_ZIPSCOPED     	0x04000004	// 04000000, wbregs names: ZIPSCOPED
// GPS UART registers, similar to WBUART
#define	R_GPSU_SETUP    	0x06000000	// 06000000, wbregs names: GPSSETUP
#define	R_GPSU_FIFO     	0x06000004	// 06000000, wbregs names: GPSFIFO
#define	R_GPSU_UARTRX   	0x06000008	// 06000000, wbregs names: GPSRX
#define	R_GPSU_UARTTX   	0x0600000c	// 06000000, wbregs names: GPSTX
// SD-SPI addresses
#define	R_SDSPI_CTRL    	0x08000000	// 08000000, wbregs names: SDCARD
#define	R_SDSPI_DATA    	0x08000004	// 08000000, wbregs names: SDDATA
#define	R_SDSPI_FIFOA   	0x08000008	// 08000000, wbregs names: SDFIFOA, SDFIF0, SDFIFA
#define	R_SDSPI_FIFOB   	0x0800000c	// 08000000, wbregs names: SDFIFOB, SDFIF1, SDFIFB
// CONSOLE registers
#define	R_CONSOLE_FIFO  	0x0a000004	// 0a000000, wbregs names: UFIFO
#define	R_CONSOLE_UARTRX	0x0a000008	// 0a000000, wbregs names: RX
#define	R_CONSOLE_UARTTX	0x0a00000c	// 0a000000, wbregs names: TX
// FPGA CONFIG REGISTERS: 0x4e0-0x4ff
#define	R_CFG_CRC       	0x0c000000	// 0c000000, wbregs names: FPGACRC
#define	R_CFG_FAR       	0x0c000004	// 0c000000, wbregs names: FPGAFAR
#define	R_CFG_FDRI      	0x0c000008	// 0c000000, wbregs names: FPGAFDRI
#define	R_CFG_FDRO      	0x0c00000c	// 0c000000, wbregs names: FPGAFDRO
#define	R_CFG_CMD       	0x0c000010	// 0c000000, wbregs names: FPGACMD
#define	R_CFG_CTL0      	0x0c000014	// 0c000000, wbregs names: FPGACTL0
#define	R_CFG_MASK      	0x0c000018	// 0c000000, wbregs names: FPGAMASK
#define	R_CFG_STAT      	0x0c00001c	// 0c000000, wbregs names: FPGASTAT
#define	R_CFG_LOUT      	0x0c000020	// 0c000000, wbregs names: FPGALOUT
#define	R_CFG_COR0      	0x0c000024	// 0c000000, wbregs names: FPGACOR0
#define	R_CFG_MFWR      	0x0c000028	// 0c000000, wbregs names: FPGAMFWR
#define	R_CFG_CBC       	0x0c00002c	// 0c000000, wbregs names: FPGACBC
#define	R_CFG_IDCODE    	0x0c000030	// 0c000000, wbregs names: FPGAIDCODE
#define	R_CFG_AXSS      	0x0c000034	// 0c000000, wbregs names: FPGAAXSS
#define	R_CFG_COR1      	0x0c000038	// 0c000000, wbregs names: FPGACOR1
#define	R_CFG_WBSTAR    	0x0c000040	// 0c000000, wbregs names: WBSTAR
#define	R_CFG_TIMER     	0x0c000044	// 0c000000, wbregs names: CFGTIMER
#define	R_CFG_BOOTSTS   	0x0c000058	// 0c000000, wbregs names: BOOTSTS
#define	R_CFG_CTL1      	0x0c000060	// 0c000000, wbregs names: FPGACTL1
#define	R_CFG_BSPI      	0x0c00007c	// 0c000000, wbregs names: FPGABSPI
// Ethernet configuration (MDIO) port
#define	R_MDIO_BMCR     	0x0e000000	// 0e000000, wbregs names: BMCR
#define	R_MDIO_BMSR     	0x0e000004	// 0e000000, wbregs names: BMSR
#define	R_MDIO_PHYIDR1  	0x0e000008	// 0e000000, wbregs names: PHYIDR1
#define	R_MDIO_PHYIDR2  	0x0e00000c	// 0e000000, wbregs names: PHYIDR2
#define	R_MDIO_ANAR     	0x0e000010	// 0e000000, wbregs names: ANAR
#define	R_MDIO_ANLPAR   	0x0e000014	// 0e000000, wbregs names: ANLPAR
#define	R_MDIO_ANER     	0x0e000018	// 0e000000, wbregs names: ANER
#define	R_MDIO_ANNPTR   	0x0e00001c	// 0e000000, wbregs names: ANNPTR
#define	R_MDIO_ANNPRR   	0x0e000020	// 0e000000, wbregs names: ANNPRR
#define	R_MDIO_GBCR     	0x0e000024	// 0e000000, wbregs names: GBCR
#define	R_MDIO_GBSR     	0x0e000028	// 0e000000, wbregs names: GBSR
#define	R_MDIO_MACR     	0x0e000034	// 0e000000, wbregs names: MACR
#define	R_MDIO_MAADR    	0x0e000038	// 0e000000, wbregs names: MAADR
#define	R_MDIO_GBESR    	0x0e00003c	// 0e000000, wbregs names: GBESR
#define	R_MDIO_PHYCR    	0x0e000040	// 0e000000, wbregs names: PHYCR
#define	R_MDIO_PHYSR    	0x0e000044	// 0e000000, wbregs names: PHYSR
#define	R_MDIO_INER     	0x0e000048	// 0e000000, wbregs names: INER
#define	R_MDIO_INSR     	0x0e00004c	// 0e000000, wbregs names: INSR
#define	R_MDIO_RXERC    	0x0e000060	// 0e000000, wbregs names: RXERC
#define	R_MDIO_LDPSR    	0x0e00006c	// 0e000000, wbregs names: LDPSR
#define	R_MDIO_EPAGSR   	0x0e000078	// 0e000000, wbregs names: EPAGSR
#define	R_MDIO_PAGSEL   	0x0e00007c	// 0e000000, wbregs names: PAGSEL
#define	R_XMDIO_PC1R    	0x0e000000	// 0e000000, wbregs names: XPC1R
#define	R_XMDIO_PS1R    	0x0e000004	// 0e000000, wbregs names: XPS1R
#define	R_XMDIO_EEECR   	0x0e000050	// 0e000000, wbregs names: XEEECR
#define	R_XMDIO_EEEWER  	0x0e000040	// 0e000000, wbregs names: XEEEWER
#define	R_XMDIO_EEEAR   	0x0e0000f0	// 0e000000, wbregs names: XEEEAR
#define	R_XMDIO_EEELPAR 	0x0e0000f4	// 0e000000, wbregs names: XEEELPAR
#define	R_XMDIO_LACR    	0x0e000068	// 0e000000, wbregs names: XLACR
#define	R_XMDIO_LCR     	0x0e000070	// 0e000000, wbregs names: XLCR
// GPS clock tracker, control loop settings registers
#define	R_GPS_ALPHA     	0x10000000	// 10000000, wbregs names: ALPHA
#define	R_GPS_BETA      	0x10000004	// 10000000, wbregs names: BETA
#define	R_GPS_GAMMA     	0x10000008	// 10000000, wbregs names: GAMMA
#define	R_GPS_STEP      	0x1000000c	// 10000000, wbregs names: STEP
// RTC clock registers
#define	R_CLOCK         	0x10000020	// 10000020, wbregs names: CLOCK
#define	R_TIMER         	0x10000024	// 10000020, wbregs names: TIMER
#define	R_STOPWATCH     	0x10000028	// 10000020, wbregs names: STOPWATCH
#define	R_CKALARM       	0x1000002c	// 10000020, wbregs names: ALARM, CKALARM
// GPS clock test bench registers, for measuring the clock trackers performance
#define	R_GPSTB_FREQ    	0x10000040	// 10000040, wbregs names: GPSFREQ
#define	R_GPSTB_JUMP    	0x10000044	// 10000040, wbregs names: GPSJUMP
#define	R_GPSTB_ERRHI   	0x10000048	// 10000040, wbregs names: ERRHI
#define	R_GPSTB_ERRLO   	0x1000004c	// 10000040, wbregs names: ERRLO
#define	R_GPSTB_COUNTHI 	0x10000050	// 10000040, wbregs names: CNTHI
#define	R_GPSTB_COUNTLO 	0x10000054	// 10000040, wbregs names: CNTLO
#define	R_GPSTB_STEPHI  	0x10000058	// 10000040, wbregs names: STEPHI
#define	R_GPSTB_STEPLO  	0x1000005c	// 10000040, wbregs names: STEPLO
#define	R_NET_RXCMD     	0x10000060	// 10000060, wbregs names: RXCMD, NETRX
#define	R_NET_TXCMD     	0x10000064	// 10000060, wbregs names: TXCMD, NETTX
#define	R_NET_MACHI     	0x10000068	// 10000060, wbregs names: MACHI
#define	R_NET_MACLO     	0x1000006c	// 10000060, wbregs names: MACLO
#define	R_NET_RXMISS    	0x10000070	// 10000060, wbregs names: NETMISS
#define	R_NET_RXERR     	0x10000074	// 10000060, wbregs names: NETERR
#define	R_NET_RXCRC     	0x10000078	// 10000060, wbregs names: NETCRCER
#define	R_NET_TXCOL     	0x1000007c	// 10000060, wbregs names: NETCOL
#define	R_BUILDTIME     	0x10000080	// 10000080, wbregs names: BUILDTIME
#define	R_BUSERR        	0x10000084	// 10000084, wbregs names: BUSERR
#define	R_PIC           	0x10000088	// 10000088, wbregs names: PIC
#define	R_GENCLK        	0x1000008c	// 1000008c, wbregs names: GENCLK
// SYSCLK Clock Counter (measures clock speed)
#define	R_GENCLKFB      	0x10000090	// 10000090, wbregs names: GENCLKFB
#define	R_GPIO          	0x10000094	// 10000094, wbregs names: GPIO, GPI, GPO
// Network RX clock counter (measures clock speed)
#define	R_NETCLOCKCTR   	0x10000098	// 10000098, wbregs names: NETCLOCKCTR
// Network TX clock counter (measures clock speed)
#define	R_NETTXCLK      	0x1000009c	// 1000009c, wbregs names: NETTXCLK
#define	R_PWRCOUNT      	0x100000a0	// 100000a0, wbregs names: PWRCOUNT
#define	R_RTCDATE       	0x100000a4	// 100000a4, wbregs names: RTCDATE, DATE
#define	R_SPIO          	0x100000a8	// 100000a8, wbregs names: SPIO
// A register capturing subseconds, locked to GPS if present
#define	R_SUBSECONDS    	0x100000ac	// 100000ac, wbregs names: SUBSECONDS
// SYSCLK Clock Counter (measures clock speed)
#define	R_SYSCLK        	0x100000b0	// 100000b0, wbregs names: SYSCLK
#define	R_VERSION       	0x100000b4	// 100000b4, wbregs names: VERSION
#define	R_NET_RXBUF     	0x12000000	// 12000000, wbregs names: NETRXB
#define	R_NET_TXBUF     	0x12004000	// 12000000, wbregs names: NETTXB
#define	R_BKRAM         	0x14000000	// 14000000, wbregs names: RAM
#define	R_FLASH         	0x16000000	// 16000000, wbregs names: FLASH
#define	R_SDRAM         	0x20000000	// 20000000, wbregs names: SDRAM


//
// The @REGDEFS.H.DEFNS tag
//
// @REGDEFS.H.DEFNS for masters
#define	R_ZIPCTRL	0x40000000
#define	R_ZIPDATA	0x40000004
// #define	RESET_ADDRESS	@$[0x%08x](RESET_ADDRESS)
#define	BAUDRATE	2000000
// @REGDEFS.H.DEFNS for peripherals
#define	SDRAMBASE	0x20000000
#define	SDRAMLEN	0x20000000
#define	FLASHBASE	0x16000000
#define	FLASHLEN	0x01000000
#define	FLASHLGLEN	24
//
#define	FLASH_RDDELAY	1
#define	FLASH_NDUMMY	6
//
#define	BKRAMBASE	0x14000000
#define	BKRAMLEN	0x00100000
// @REGDEFS.H.DEFNS at the top level
// End of definitions from REGDEFS.H.DEFNS
//
// The @REGDEFS.H.INSERT tag
//
// @REGDEFS.H.INSERT for masters
// @REGDEFS.H.INSERT for peripherals
// Network packet interface
#define	ENET_TXGO		0x004000
#define	ENET_TXBUSY		0x004000
#define	ENET_NOHWCRC		0x008000
#define	ENET_NOHWMAC		0x010000
#define	ENET_RESET		0x020000
#define	ENET_NOHWIPCHK		0x040000
#define	ENET_TXCMD(LEN)		((LEN)|ENET_TXGO)
#define	ENET_TXCLR		0x038000
#define	ENET_TXCANCEL		0x000000
#define	ENET_RXAVAIL		0x004000
#define	ENET_RXBUSY		0x008000
#define	ENET_RXMISS		0x010000
#define	ENET_RXERR		0x020000
#define	ENET_RXCRC		0x040000	// Set on a CRC error
#define	ENET_RXLEN		rxcmd & 0x0ffff
#define	ENET_RXCLR		0x004000
#define	ENET_RXBROADCAST	0x080000
#define	ENET_RXCLRERR		0x078000


#define	CPU_GO		0x0000
#define	CPU_RESET	0x0040
#define	CPU_INT		0x0080
#define	CPU_STEP	0x0100
#define	CPU_STALL	0x0200
#define	CPU_HALT	0x0400
#define	CPU_CLRCACHE	0x0800
#define	CPU_sR0		0x0000
#define	CPU_sSP		0x000d
#define	CPU_sCC		0x000e
#define	CPU_sPC		0x000f
#define	CPU_uR0		0x0010
#define	CPU_uSP		0x001d
#define	CPU_uCC		0x001e
#define	CPU_uPC		0x001f

#ifdef	BKROM_ACCESS
#define	RESET_ADDRESS	@$[0x%08x](bkrom.REGBASE)
#else
#ifdef	FLASH_ACCESS
#define	RESET_ADDRESS	0x16600000
#else
#define	RESET_ADDRESS	0x14000000
#endif	// FLASH_ACCESS
#endif	// BKROM_ACCESS


// Flash control constants
#define	QSPI_FLASH	// This core and hardware support a Quad SPI flash
#define	SZPAGEB		256
#define	PGLENB		256
#define	SZPAGEW		64
#define	PGLENW		64
#define	NPAGES		256
#define	SECTORSZB	(NPAGES * SZPAGEB)	// In bytes, not words!!
#define	SECTORSZW	(NPAGES * SZPAGEW)	// In words
#define	NSECTORS	64
#define	SECTOROF(A)	((A) & (-1<<16))
#define	SUBSECTOROF(A)	((A) & (-1<<12))
#define	PAGEOF(A)	((A) & (-1<<8))

// @REGDEFS.H.INSERT from the top level
typedef	struct {
	unsigned	m_addr;
	const char	*m_name;
} REGNAME;

extern	const	REGNAME	*bregs;
extern	const	int	NREGS;
// #define	NREGS	(sizeof(bregs)/sizeof(bregs[0]))

extern	unsigned	addrdecode(const char *v);
extern	const	char *addrname(const unsigned v);
// End of definitions from REGDEFS.H.INSERT


#endif	// REGDEFS_H
